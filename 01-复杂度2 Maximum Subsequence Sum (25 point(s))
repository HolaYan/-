Given a sequence of K integers { N1, N2, ..., NK}. A continuous subsequence is defined to be { Ni, Ni+1, ..., Nj} where 1≤i≤j≤K. The Maximum Subsequence is the continuous subsequence which has the largest sum of its elements. For example, given sequence { -2, 11, -4, 13, -5, -2 }, its maximum subsequence is { 11, -4, 13 } with the largest sum being 20.

Now you are supposed to find the largest sum, together with the first and the last numbers of the maximum subsequence.

Input Specification:
Each input file contains one test case. Each case occupies two lines. The first line contains a positive integer K (≤10000). The second line contains K numbers, separated by a space.

Output Specification:
For each test case, output in one line the largest sum, together with the first and the last numbers of the maximum subsequence. The numbers must be separated by one space, but there must be no extra space at the end of a line. In case that the maximum subsequence is not unique, output the one with the smallest indices i and j (as shown by the sample case). If all the K numbers are negative, then its maximum sum is defined to be 0, and you are supposed to output the first and the last numbers of the whole sequence.

Sample Input:
10
-10 1 2 3 4 -5 -23 3 7 -21
结尾无空行

Sample Output:
10 1 4
结尾无空行

我的想法：在线处理加上存储开始和结束点点位置
（但仍然未能处理全是负数和有两组相同最大值的情况）

#include <stdio.h>
#include <stdlib.h>
int start,finish;

int maxsum(int *nums, int numsSize);

int main(){
    int Size;
    scanf("%d",&Size);
    int Num[Size];
    for(int i = 0; i < Size;i++){
        scanf("%d",&Num[i]);
    }
    int max;
    max = maxsum(Num,Size);
    printf("%d %d %d",max,Num[start],Num[finish]);
}

int maxsum(int *nums, int numsSize){
    int max = 0,tmpt = 0;
    start = 0;
    for(int i = 0; i < numsSize;i++){
        if(max == 0 && tmpt == 0) start = i;
        max += nums[i];
        //printf("%d %d\n",start,finish);
        if(max < 0){
            max = 0; 
            //start = i+1;
        }
        else if(max > tmpt) {
            tmpt = max;
            finish = i;
        }
    }
    //printf("%d %d\n",start,finish);
    if(tmpt == 0){
        max = nums[0];
        for(int i = 1; i < numsSize;i++){
            if(nums[i] > max){
                max = nums[i]; 
                start = finish = i;
            }
        }
        
        tmpt = max;
    }
    return tmpt;
}
