题目描述：
给定一个整数数组，判断是否存在重复元素。
如果存在一值在数组中出现至少两次，函数返回 true 。如果数组中每个元素都不相同，则返回 false 。

一开始自己的思路：暴力比较（显然代码只需要几个循环即可），时间复杂度和空间复杂度直接爆炸

官方题解的思路：
1.排序之后比较
这里用了一个新的（对于我来说新的）函数：qsort函数
贴一个用法链接（很全，可以排序任何类型的数据）：https://www.cnblogs.com/syxchina/archive/2010/07/29/2197382.html
排完序之后就很好办了，重点就在于qsort函数
自己写的代码：
```c
int cmp ( const void *a , const void *b )

{ return *(int *)a - *(int *)b; 
}


bool containsDuplicate(int* nums, int numsSize){
    qsort(nums,numsSize,sizeof(nums[0]),cmp);
    int tmpt = nums[0];
    for(int i = 1; i < numsSize;i++){
        if(nums[i] == tmpt) return true;
        tmpt = nums[i];
    }
    return false;
}
时间复杂度：O（NlogN）->需要对数组进行排序
空间复杂度：O（log N）->考虑调用栈道深度

2.哈希表
（还没自己写，先把思路和实例代码贴上来）
对于数组中每个元素，我们将它插入到哈希表中。如果插入一个元素时发现该元素已经存在于哈希表中，则说明存在重复的元素。
```c
struct hashTable {
    int key;
    UT_hash_handle hh;
};

bool containsDuplicate(int* nums, int numsSize) {
    struct hashTable* set = NULL;
    for (int i = 0; i < numsSize; i++) {
        struct hashTable* tmp;
        HASH_FIND_INT(set, nums + i, tmp);
        if (tmp == NULL) {
            tmp = malloc(sizeof(struct hashTable));
            tmp->key = nums[i];
            HASH_ADD_INT(set, key, tmp);
        } else {
            return true;
        }
    }
    return false;
}
时间空间复杂度均为O（N）
